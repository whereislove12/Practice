package com.Practice.mydemmo.TrainingCouser.EmploymentClass.FirstStage.day15_JunitReflectClassLoadoerAnnotation.Annotation;

/**
 * 注解（Annotation）:
 * 也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、 接口、枚举是在同一个层次。
 * 它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。
 * 作用分类：
 * 编写文档：通过代码里标识的注解生成文档【例如，生成文档doc文档】
 * 代码分析：通过代码里标识的注解对代码进行分析【例如，注解的反射】
 * 编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【例如，Override】
 * 常见注解
 * 1. @author：用来标识作者名
 * 2. @version：用于标识对象的版本号，适用范围：文件、类、方法。
 * 3. @Override ：用来修饰方法声明，告诉编译器该方法是重写父类中的方法，如果父类不存在该方法，则编译 失败。
 * ******************************************************************************************************************
 * 定义格式:
 * 元注解
 * public @interface 注解名称{ 属性列表;}
 * 注解本质上就是一个接口，该接口默认继承Annotation接口
 * ******************************************************************************************************************
 * 注解的属性
 * 1. 属性的作用
 * 可以让用户在使用注解时传递参数，让注解的功能更加强大。
 * 2. 属性的格式
 * 格式1：数据类型 属性名();
 * 格式2：数据类型 属性名() default 默认值;
 * 3. 属性定义示例
 * public @interface Student {
 * String name(); // 姓名
 * int age() default 18; // 年龄
 * String gender() default "男"; // 性别
 * }
 * // 该注解就有了三个属性：name，age，gender
 * 4. 属性适用的数据类型
 * 八种基本数据类型（int,float,boolean,byte,double,char,long,short)
 * String类型，Class类型，枚举类型，注解类型
 * 以上所有类型的一维数组
 */
public class AnnotationReflect1 {
}
